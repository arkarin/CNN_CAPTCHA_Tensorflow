import numpy as np
import os
from captcha.image import ImageCaptcha
import cv2

"""Two types of CAPTCHA
one is generated by a captcha library
the other is a subset of CAPTCHA from "Baidu" 2018-07-12
"""

class GenIterator:
    """An iterator yield batch of CAPTCHA generated by library
    With a generator we can obtain infinite dataset
    
    Arguments:
        batch_size: the batch_size of the data yield by next_batch
        font_source: the dir of the font required by captcha library
          for example, font_source=['./data/font1.ttf']
    """

    def __init__(self, batch_size, font_source):
        self.batch_size = batch_size
        self.fonts = ImageCaptcha(fonts=font_source)
        
        charset = 'ABCEFHKMRS'
        self.encode_maps = {}
        self.decode_maps = {}
        for i, char in enumerate(charset):
            self.encode_maps[char] = i
            self.decode_maps[i] = char
            
    def next_batch(self):
        labels = np.random.randint(0, 10, size=[self.batch_size, 5])
        
        def image_regularization(im):
            im = im.resize((160, 60)).convert('L')
            return np.asarray(im)
        
        chars = [[self.decode_maps[j] for j in i] for i in labels]
        images = [image_regularization(self.fonts.generate_image(i)) for i in chars]
        images = np.asarray(images, dtype=np.float32) / 255.0  
        images = np.reshape(images, [self.batch_size, 60, 160, 1])
        labels = np.asarray(labels, dtype=np.int64)
        return images, labels

class BaiduIterator:
    """An iterator yield batch of CAPTCHA from Baidu
    we have collected 10k CAPTCHA and label them manually as the dataset
    """
    def __init__(self, data_dir, batch_size):
        self.batch_size = batch_size
        
        charset = 'ABCDEFGHIJKLMNOPQRSTUVWXY'
        self.encode_maps = {}
        self.decode_maps = {}
        for i, char in enumerate(charset):
            self.encode_maps[char] = i
            self.decode_maps[i] = char
        
        self.images = []
        self.labels = []
        for root, sub_folder, file_list in os.walk(data_dir):
            for file_path in file_list:
                image_name = os.path.join(root, file_path)
                
                im = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE).astype(np.float32) / 255.
                im = np.reshape(im, [40, 100, 1])
                self.images.append(im)

                """image is named like /.../<folder>/00000_abcd.png
                """
                code = image_name.split('/')[-1].split('_')[1].split('.')[0]     
                code = [self.encode_maps[c] for c in list(code)]
                self.labels.append(code)
        self.train_size = len(self.labels)
        self.num_batch = self.train_size / self.batch_size
        self.iter_count = 0
        
    def size(self):
        return self.train_size
    
    def num_batch(self):
        return self.num_batch
    
    def shuffle(self):
        shuffle_idx = np.random.permutation(self.train_size)
        self.images = [self.images[i] for i in shuffle_idx]
        self.labels = [self.labels[i] for i in shuffle_idx]
        self.iter_count = 0
        
    def reset_iter(self):
        self.iter_count = 0
        
    def next_batch(self):
        idx = range(self.iter_count * self.batch_size, (self.iter_count + 1) * self.batch_size)
        image_batch = np.asarray([self.images[i] for i in idx])
        label_batch = np.asarray([self.labels[i] for i in idx])
        self.iter_count += 1
        return [image_batch, label_batch]
    
    

